from pyautogui import *
import pyautogui
import time
import keyboard
import random
import win32api, win32con
from PIL import Image
import PySimpleGUI as sg
import numpy as np
import threading
import trace
import cv2
from pytictoc import TicToc

o = TicToc()

##click functionality
def click():
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,0,0)
    time.sleep(.1)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,0,0)

def skipper():
    buttonlocation = pyautogui.locateOnScreen('Misc Images/Skip Cutscene.png', grayScale = True, confidence = .7)
    if buttonlocation != None:
        centercoord = pyautogui.center(buttonlocation)
        pyautogui.moveTo(buttonlocation)
        click()
        time.sleep(np.random.uniform(.6,.8))

##looks for hop off image that appears when getting on cart, if it does not see it, opens schticker book and returns toon to playground
def checker():
    if pyautogui.locateOnScreen('Misc Images/Hop Off.png', grayscale=True, confidence=.8) == None:
        pyautogui.moveTo(1702,924, np.random.uniform(.2,.4), pyautogui.easeInElastic)
        click()
        time.sleep(np.random.uniform(.2,.4))
        pyautogui.moveTo(1463,290, np.random.uniform(.2,.4), pyautogui.easeInQuad)
        click()
        time.sleep(np.random.uniform(.6,.8))
        pyautogui.moveTo(1266,889, np.random.uniform(.2,.4), pyautogui.easeOutQuad)
        click()
        time.sleep(np.random.uniform(.6,.8))


##Use threading to prevent GUI from not responding, create kill function within so stop button works as intended
class KThread(threading.Thread):
  def __init__(self, *args, **keywords):
    threading.Thread.__init__(self, *args, **keywords)
    self.killed = False
  def start(self):
    self.__run_backup = self.run
    self.run = self.__run     
    threading.Thread.start(self)
  def __run(self):
    sys.settrace(self.globaltrace)
    self.__run_backup()
    self.run = self.__run_backup
  def globaltrace(self, frame, why, arg):
    if why == 'call':
      return self.localtrace
    else:
      return None
  def localtrace(self, frame, why, arg):
    if self.killed:
      if why == 'line':
        raise SystemExit()
    return self.localtrace
  def kill(self):
    self.killed = True


## 1852,998  1560,241   1322,956
#main loop that determines whether toon is golfing/in spawn, then performs correct action based on image recognized  
def bigwhileloop():
    global Golfing
    Golfing = False
    o.tic()
    while 1:
            if not Golfing:
                if pyautogui.locateOnScreen('Spawn Images/spawn1_1600x900.png', grayscale=True, confidence=.65) != None:
                    print("I can see it")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.705)
                    pyautogui.keyUp('left')
                    time.sleep(.3)
                    pyautogui.keyDown('up')
                    time.sleep(5)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Spawn Images/spawn2_1600x900.png', grayscale=True, confidence=.7) !=None:
                    print("I can see it2")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(1.13)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('up')
                    time.sleep(5)
                    pyautogui.keyUp('up')
                    pyautogui.keyDown('right')
                    time.sleep(.131)
                    pyautogui.keyUp('right')
                    pyautogui.keyDown('up')
                    time.sleep(3.5)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Spawn Images/spawn3_1600x900.png', grayscale=True, confidence=.65) !=None or pyautogui.locateOnScreen('Spawn Images/spawn3ALT.png', grayscale=True, confidence=.65) !=None:
                    print("I can see it3")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.03)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('up')
                    time.sleep(12)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Spawn Images/spawn4_1600x900.png', grayscale=True, confidence=.65) !=None:
                    print("I can see it4")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.24)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('up')
                    time.sleep(6)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Spawn Images/spawn5_1600x900.png', grayscale=True, confidence=.65) !=None:
                    print("I can see it5")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.6168)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('up')
                    time.sleep(10.3)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                #elif pyautogui.locateOnScreen('Spawn Images/spawn6.png', grayscale=True, confidence=.65) !=None:
                 #   print("I can see it6")
                  #  time.sleep(1.5)
                   # pyautogui.keyDown('ctrl')
                    #time.sleep(5)
                    #pyautogui.keyUp('ctrl')
                    #time.sleep(1)
                    #checker()
                    
                #elif pyautogui.locateOnScreen('Spawn Images/spawn7.png', grayscale=True, confidence=.65) !=None:
                 #   print("I can see it7")
                  #  time.sleep(.5)
                   # pyautogui.keyDown('ctrl')
                    #time.sleep(5)
                    #pyautogui.keyUp('ctrl')
                    #time.sleep(1)
                    #checker()
                    
                elif pyautogui.locateOnScreen('Spawn Images/spawn8.png', grayscale=True, confidence=.75) !=None or pyautogui.locateOnScreen('Spawn Images/spawn8_1600x900.png', grayscale=True, confidence=.75) !=None:
                    print("I can see it8")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.798)
                    pyautogui.keyUp('left')
                    time.sleep(.3)
                    pyautogui.keyDown('up')
                    time.sleep(9.5)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Spawn Images/spawn9_1600x900.png', grayscale=True, confidence=.65) !=None:
                    print("I can see it9")
                    time.sleep(1.5)
                    pyautogui.keyDown('left')
                    time.sleep(.85)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('up')
                    time.sleep(2)
                    pyautogui.keyUp('up')
                    time.sleep(1)
                    checker()
                    o.tocvalue(restart=True)
                elif pyautogui.locateOnScreen('Misc Images/picnictimer.png', grayscale = True, confidence = .7) != None:
                    pyautogui.moveTo(1682,763, np.random.uniform(.2,.4), pyautogui.easeInElastic)
                    click()
                    time.sleep(np.random.uniform(1.2,1.5))
                    checker()
                    o.tocvalue(restart=True)
#pyautogui.locateOnScreen('Spawn Images/spawn1_1600x900.png', grayscale=True, confidence=.65) != None and pyautogui.locateOnScreen('Spawn Images/spawn2_1600x900.png', grayscale=True, confidence=.7) !=None and pyautogui.locateOnScreen('Spawn Images/spawn3_1600x900.png', grayscale=True, confidence=.65) !=None and pyautogui.locateOnScreen('Spawn Images/spawn3ALT.png', grayscale=True, confidence=.65) !=None and pyautogui.locateOnScreen('Spawn Images/spawn4_1600x900.png', grayscale=True, confidence=.65) !=None and pyautogui.locateOnScreen('Spawn Images/spawn5_1600x900.png', grayscale=True, confidence=.65) !=None and pyautogui.locateOnScreen('Spawn Images/spawn8.png', grayscale=True, confidence=.75) !=None and pyautogui.locateOnScreen('Spawn Images/spawn8_1600x900.png', grayscale=True, confidence=.75) !=None and pyautogui.locateOnScreen('Spawn Images/spawn9_1600x900.png', grayscale=True, confidence=.65) !=None:
                elif o.tocvalue() > 20:
                    pyautogui.moveTo(1702,924, np.random.uniform(.2,.4), pyautogui.easeInElastic)
                    click()
                    time.sleep(np.random.uniform(.2,.4))
                    pyautogui.moveTo(1463,290, np.random.uniform(.2,.4), pyautogui.easeInQuad)
                    click()
                    time.sleep(np.random.uniform(.6,.8))
                    pyautogui.moveTo(1266,889, np.random.uniform(.2,.4), pyautogui.easeOutQuad)
                    click()
                    time.sleep(np.random.uniform(.6,.8))
                    o.tocvalue(restart=True)
                    
                #prints 'golfing' if hop off image is seen
                elif pyautogui.locateOnScreen('Misc Images/Hop Off.png', grayscale=True, confidence=.8) != None:
                    Golfing = True
                    print('Golfing')
                    continue
                
            elif Golfing:
                #determines which course is presented via image recognition, and then performs correct actions based on hole
                if pyautogui.locateOnScreen('Course Images/Afternoon Tee.png', grayscale=True, confidence=.7) !=None or pyautogui.locateOnScreen('Course Images/Afternoon Tee2.png', grayscale=True, confidence=.7) !=None or pyautogui.locateOnScreen('Course Images/Afternoon Tee3.png', grayscale=True, confidence=.7) !=None:
                    print("Afternoon Tee")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInQuad)
                    click()
                    time.sleep(np.random.uniform(.3,.4))
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(.3)
                    pyautogui.keyDown('ctrl')
                    time.sleep(2)
                    pyautogui.keyUp('ctrl')
            
                elif pyautogui.locateOnScreen('Course Images/Down the Hatch.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Down the Hatch2.png', grayscale=True, confidence=.8) !=None:
                    print("Down the Hatch")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInBounce)
                    click()
                    time.sleep(np.random.uniform(.4,.6))
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.8)
                    pyautogui.keyUp('ctrl')
                    time.sleep(18)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Hole in Fun.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Hole in Fun2.png', grayscale=True, confidence=.8) !=None:
                    print("Hole in Fun")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeOutQuad)
                    click()
                    pyautogui.keyDown('left')
                    time.sleep(.1)
                    pyautogui.keyUp('left')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(.1)
                    pyautogui.keyDown('up')
                    time.sleep(.1)
                    pyautogui.keyUp('up')
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.05)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Hole on the Range.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Hole on the Range2.png', grayscale=True, confidence=.8) !=None:
                    print("Hole on the Range")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInOutQuad)
                    click()
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.68)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Holey Mackerel.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Holey Mackerel2.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Holey Mackerel3.png', grayscale=True, confidence=.8) !=None:
                    print("Holey Mackerel")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInOutQuad)
                    click()
                    time.sleep(1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(1)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Hot Links.png', grayscale=True, confidence=.7) !=None or pyautogui.locateOnScreen('Course Images/Hot Links2.png', grayscale=True, confidence=.7) !=None or pyautogui.locateOnScreen('Course Images/Hot Links3.png', grayscale=True, confidence=.7) !=None or pyautogui.locateOnScreen('Course Images/Hot Links4.png', grayscale=True, confidence=.7) !=None:
                    print("Hot Links")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInElastic)
                    click()
                    time.sleep(np.random.uniform(.4,.6))
                    pyautogui.keyDown('right')
                    time.sleep(.1)
                    pyautogui.keyUp('right')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(.1)
                    pyautogui.keyDown('left')
                    time.sleep(.4)
                    pyautogui.keyUp('left')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.1)
                    pyautogui.keyUp('ctrl')
                    time.sleep(18)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/One Little Birdie.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/One Little Birdie2.png', grayscale=True, confidence=.8) !=None:
                    print("One Little Birdie")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInBounce)
                    click()
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    pyautogui.keyDown('right')
                    time.sleep(.6)
                    pyautogui.keyUp('right')
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.8)
                    pyautogui.keyUp('ctrl')
                    time.sleep(15)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')
                    
                    
                elif pyautogui.locateOnScreen('Course Images/Peanut Putter.png', grayscale=True, confidence=.75) !=None or pyautogui.locateOnScreen('Course Images/Peanut Putter2.png', grayscale=True, confidence=.75) !=None:
                    print("Peanut Putter")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInOutQuad)
                    click()
                    time.sleep(.8)
                    pyautogui.keyDown('left')
                    time.sleep(np.random.uniform(.1,.15))
                    pyautogui.keyUp('left')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(np.random.uniform(.1,.15))
                    pyautogui.keyUp('ctrl')
                    time.sleep(np.random.uniform(.1,.2))
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.95)
                    pyautogui.keyUp('ctrl')
                    time.sleep(np.random.uniform(16,18))
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Seeing Green.png', grayscale=True, confidence=.8) !=None or pyautogui.locateOnScreen('Course Images/Seeing Green2.png', grayscale=True, confidence=.8) !=None:
                    print("Seeing Green")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInOutQuad)
                    click()
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    pyautogui.keyDown('ctrl')
                    time.sleep(1.55)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Swing a Long.png', grayscale=True, confidence=.75) !=None or pyautogui.locateOnScreen('Course Images/Swing a Long2.png', grayscale=True, confidence=.75) !=None:
                    print("Swing a Long")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeInQuad)
                    click()
                    time.sleep(.8)
                    pyautogui.keyDown('left')
                    time.sleep(.1)
                    pyautogui.keyUp('left')
                    time.sleep(.1)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.5)
                    pyautogui.keyUp('ctrl')
                    pyautogui.keyDown('right')
                    time.sleep(.5)
                    pyautogui.keyUp('right')
                    pyautogui.keyDown('ctrl')
                    time.sleep(2.2)
                    pyautogui.keyUp('ctrl')
                    time.sleep(20)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')
                    
                elif pyautogui.locateOnScreen('Course Images/Swing Time.png', grayscale=True, confidence=.75) !=None or pyautogui.locateOnScreen('Course Images/Swing Time2.png', grayscale=True, confidence=.75) !=None:
                    print("Swing Time")
                    time.sleep(.1)
                    pyautogui.moveTo(1597,919, np.random.uniform(.4,.6), pyautogui.easeOutQuad)
                    click()
                    pyautogui.keyDown('left')
                    time.sleep(.1)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('ctrl')
                    time.sleep(.1)
                    pyautogui.keyUp('ctrl')
                    pyautogui.keyDown('left')
                    time.sleep(.5)
                    pyautogui.keyUp('left')
                    pyautogui.keyDown('ctrl')
                    time.sleep(.8)
                    pyautogui.keyUp('ctrl')
                    time.sleep(18)
                    pyautogui.keyDown('ctrl')
                    time.sleep(.2)
                    pyautogui.keyUp('ctrl')

                    #sees if exit button is on screen  
                elif pyautogui.locateOnScreen('Misc Images/Exit Course.png', grayscale=True, confidence=.8) != None:
                    #clicks exit button location
                    pyautogui.moveTo(1030,559, np.random.uniform(.1,.2), pyautogui.easeInQuad)
                    click()
                    o.tocvalue(restart=True)
                    #changes golfing to false
                    Golfing = False
                    print('Done Golfing')
                    continue
                #if timer runs down to 29 seconds, determines that golf ball is not going in hole, returns golfing to false so when forced out of golf holes toon resumes looking for spawn images
                elif pyautogui.locateOnScreen('Misc Images/TimerRunOut.png', grayscale = True, confidence = .8) !=None:
                    Golfing = False
                    print('Done Golfing')
                    o.tocvalue(restart=True)
                    continue

                


#creates target of thread from previously defined function
x = KThread(target=bigwhileloop)

time.sleep(1)


#GUI functionality
sg.theme('DarkAmber')
layout = [
    [sg.VPush()],
    [sg.Text('Auto Golf',key = '-GOLF-')],
    [sg.Button("Start", button_color = ('#000000','#50FF50'), border_width = 0, key = '-START-'),
     sg.Button("Stop", button_color = ('#FFFFFF','#FF5050'), border_width = 0, key = '-EXIT-'),
     sg.Text('', key = '-OUTPUT-')],
    [sg.VPush()],
]
window = sg.Window('Auto Golf GUI',
                   layout,
                   size = (300,200),
                   no_titlebar = False,
                   element_justification = 'center',
                   )

while True:
     event, values = window.read()
     if event == "-EXIT-" or event == sg.WIN_CLOSED:
         window['-OUTPUT-'].update('Stopped')
         x.kill()
         break

     if  event == '-START-':
         window['-OUTPUT-'].update('Started')
         x.start()
         
         
         
     
             
window.close()

